from django.core.management.base import BaseCommand
from horse.models import Trait

class Command(BaseCommand):
    help = 'Create traits data'

    def handle(self, *args, **options):
        traits_data = [
            ("新潟県民", "レースが必ず雪になる"),
            ("雷神", "レースが必ず雷になる"),
            ("晴れ男", "レースが必ず晴れになる"),
            ("雨女", "レースが必ず雨になる"),
            ("雪かき", "天候が雪の時ステータス上昇"),
            ("避雷針", "天候が雷の時ステータス上昇"),
            ("光合成", "天候が晴れの時ステータス上昇"),
            ("すいすい", "天候が雨の時ステータス上昇"),
            ("金の亡者", "レース後の賞金が増える"),
            ("ユニコーン企業", "スタートダッシュ確率が上がる"),
            ("締めるとこ締めよう", "スパートが長くなる"),
            ("ほどほどニキ", "全員のステータスを下げる"),
            ("フライング上手", "スタート時に前からスタートできる"),
            ("はなさかじいさん", "走った後に花が咲く"),
            ("ボンバーマン", "走った後に爆弾💣置いていく"),
            ("花火師", "走った後に花火が上がる"),
            ("シンデレラ", "走った後に靴を置いていく"),
            ("サンタさん", "走った後にプレゼントを置いていく"),
            ("短距離型", "スピードが上がり、スタミナが下がる"),
            ("長距離型", "スピードが下がり、スタミナが上がる"),
            ("博打型", "運が上がり、スピードとスタミナは下がる"),
            ("気分屋", "レースごとにステータスが上下する"),
            ("勝負師", "競り合いに強い"),
            ("スカシ", "1位になると調子に乗る"),
            ("王者", "1位だと強い"),
            ("ネバーギブアップ", "諦めが悪い"),
            ("負け癖", "すぐに諦めてしまう"),
            ("朝活", "早起きは三文の徳"),
            ("社会人", "昼の作業には慣れてます"),
            ("夜行性", "夜にエナドリ決めます"),
            ("お祭り男", "祭り騒ぎになる"),
            ("ラスボス", "ラスボス戦に挑む"),
            ("シャイニングスター", "シャイニングスター"),
            ("レトロゲーム好き", "雰囲気をレトロにしてしまう"),
            ("らららコッペパン", "らららコッペパン🥖"),
            ("サーキット", "サーキット感を出す"),
            ("星のカービィ", "星のカービィ"),
            ("忍者", "それは残像だ"),
            ("急に来る便意", "もう間に合わない..."),
            ("吸います", "少ししか吸えない"),
            ("吸います吸います", "吸えるようになってきた"),
            ("とことん吸います", "マジで吸う"),
            ("ドリームチーム", "俺たち最強"),
            ("不幸を呼ぶもの", "誰かに不幸が訪れる"),
            ("タイムキーパー", "時を止める"),
            ("他力本願", "人任せアワード受賞"),
            ("石の上にも三年", "三年目からが本番"),
            ("七転び八起き", "転ぶことは恥ではない"),
            ("後の祭", "もう間に合わない..."),
            ("馬の耳に念仏", "特に意味なし")
        ]

        for name, description in traits_data:
            trait, created = Trait.objects.get_or_create(name=name, defaults={'description': description})

            if created:
                self.stdout.write(self.style.SUCCESS(f'Successfully created trait: {name}'))
            else:
                self.stdout.write(self.style.WARNING(f'Trait already exists: {name}'))
